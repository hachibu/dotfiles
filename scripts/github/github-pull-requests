#!/usr/bin/env crystal

require "colorize"
require "./github"
require "time"

def error(message : String) : Nil
  puts(message.colorize.red)
  exit(1)
end

error("Missing organization argument.") if ARGV.empty?

org = ARGV.first

%w(GITHUB_AUTH_TOKEN).each do |key|
  next if ENV.has_key?(key)
  error %(Missing ENV key: "#{key}".)
end

api = GitHub::Client.new(ENV["GITHUB_AUTH_TOKEN"])
all_issues = api.org_issues(org, { filter: "all" })

error("No pull requests found.") if all_issues.empty?

members = api.org_members(org).map { |m| m.login }
pull_requests = all_issues.select do |issue|
  !issue.pull_request.nil? && members.includes?(issue.user.login)
end

error("No pull requests found.") if pull_requests.empty?

parsed_pull_requests = pull_requests.map do |pr|
  open_days = (Time.utc - pr.created_at).to_i / 86_400
  open_suffix = open_days == 1 ? "day" : "days"
  {
    user_login: pr.user.login,
    html_url: pr.html_url.sub("https://", ""),
    labels: if pr.labels.empty?
              "needs review"
            else
              pr.labels.map { |l| l.name }.join(", ")
            end,
    open: "#{open_days} #{open_suffix}"
  }
end

sizes = %i(user_login html_url labels open).map do |k|
  parsed_pull_requests.max_of { |p| p[k].size }
end
format = sizes.map { |s| "%-#{s}s" }.join(" | ")
lines = parsed_pull_requests.map { |p| sprintf(format, *p.values) }

puts lines.join("\n")
