#!/usr/bin/env ruby

require_relative 'lib/utils'

def max_of(arr, key)
  arr.max_by { |d| d[key].length }[key].length
end

error('Not a git repository.') unless git_repo?

system('git fetch --all --prune')
puts

remote_branches =
  `git branch --remotes`.
  split("\n").
  each_with_object({}) do |branch, hash|
    remote_name, branch_name = branch.strip.split('/', 2)
    unless branch_name == 'master' || branch_name.start_with?('HEAD')
      hash[remote_name] ||= []
      hash[remote_name] << branch_name
    end
    hash
  end

old_branches = remote_branches.flat_map do |remote, branches|
  branches.map do |name|
    behind =
      `git rev-list --left-only --count #{remote}/master...#{remote}/#{name}`.
      strip
    {
      name: remote + '/' + name,
      behind: behind.to_i,
      remote: remote
    }
  end
end

old_branches =
  old_branches.
  sort_by { |d| [d[:remote], d[:behind]] }.
  map do |branch|
    behind = branch[:behind]
    branch[:behind] = behind.to_s.send(behind > 10 ? :red : :yellow)
    branch
  end

exit if old_branches.empty?

sizes = %i[name behind].map { |k| max_of(old_branches, k) }
format = "%-#{sizes[0]}s | %#{sizes[1]}s commits behind\n"

old_branches.each { |branch| printf(format, *branch.values) }
