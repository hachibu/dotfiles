#!/usr/bin/env crystal

require "colorize"
require "http"
require "json"

module Slack
  class Channel
    JSON.mapping(id: String, name: String)
  end
  alias Channels = Array(Channel)

  class Profile
    JSON.mapping(display_name: String)
  end

  class ChannelsListResponse
    JSON.mapping(
      ok: Bool,
      error: String?,
      channels: {
        type: Channels,
        default: Channels.new
      }
    )
  end

  class ChatPostMessageResponse
    JSON.mapping(ok: Bool, error: String?)
  end

  class UsersProfileGetResponse
    JSON.mapping(
      ok: Bool,
      error: String?,
      profile: {
        type: Profile,
        presence: true
      }
    )
  end
end

def error(message : String)
  puts(message.colorize.red)
  exit(1)
end

def gets_all : String
  lines = [] of String
  loop do
    line = gets
    break if line.nil?
    lines << line
  end
  lines.join("\n")
end

token = ENV["SLACK_AUTH_TOKEN"]
text = gets_all
channel_name = ARGV.first.strip rescue error("Missing channel name argument.")

base_params = { "token" => token }

cl_params = HTTP::Params.encode(
  base_params.merge({
    "exclude_archived" => "true",
    "exclude_members" => "true"
  })
)
cl_response = Slack::ChannelsListResponse.from_json(
  `curl --silent https://slack.com/api/channels.list?#{cl_params}`
)

error("Error listing channels: #{cl_response.error}.") unless cl_response.ok

channel = cl_response.channels.find { |channel| channel.name == channel_name }

error("Channel does not exist.") unless channel

upg_params = HTTP::Params.encode(base_params)
upg_response = Slack::UsersProfileGetResponse.from_json(
  `curl --silent https://slack.com/api/users.profile.get?#{upg_params}`
)

error("Error getting user profile: #{upg_response.error}.") unless upg_response.ok

cpm_params = HTTP::Params.encode(
  base_params.merge({
    "channel" => channel.id,
    "as_user" => upg_response.profile.display_name,
    "text" => text
  })
)
cpm_response = Slack::ChatPostMessageResponse.from_json(
  `curl --silent -X POST "https://slack.com/api/chat.postMessage" --data "#{cpm_params}"`
)

error("Error getting user profile: #{cpm_response.error}.") unless cpm_response.ok

puts(text.colorize.yellow)
puts("Message sent to channel: #{channel.name.colorize.yellow}")
